# Generated by Claude but it was so bad I had to step in and fix a bunch of stuff

#!/usr/bin/env python3
"""
Analyze Collapsi win rates assuming perfect play.
Uses the PerfectAIPlayer's game tree analysis to determine theoretical outcomes.
"""

from collapsi_core import Game, Board, Card, CardValue, Position
from perfect_ai_player import PerfectAIPlayer
from collections import defaultdict
from typing import Dict, Tuple
import time
import random


def analyze_win_rates_with_samples(n_samples=1000):
    """Analyze win rates by sampling random initial board configurations."""
    
    print("Collapsi Win Rate Analysis (Perfect Play)")
    print("=" * 50)
    
    # Statistics
    total_games = 0
    player1_wins = 0
    player2_wins = 0
    
    print(f"Analyzing {n_samples} random starting configurations...")
    print(f"This may take a few moments...\n")
    
    start_time = time.time()
    
    for sample_idx in range(n_samples):
        if sample_idx % 100 == 0:
            print(f"Progress: {sample_idx}/{n_samples} configurations analyzed...")
        
        # Create a game with this configuration
        game = Game()
        game.start_game()
        
        perfect_ai = PerfectAIPlayer(0)
        perfect_ai._initialise_from_game(game)
        
        # Get the game-theoretic outcome using the perfect solver
        collapsed_mask, p0_idx, p1_idx = perfect_ai._encode_board(game)
        outcome, _ = perfect_ai._solve(collapsed_mask, p0_idx, p1_idx, 0)
        
        total_games += 1
        
        # Track winner
        if outcome == 1:  # Player 0 wins with perfect play
            player1_wins += 1
            winner = 0
        else:  # Player 1 wins with perfect play
            player2_wins += 1
            winner = 1
    
    end_time = time.time()
    
    # Print results
    print(f"\nAnalysis complete in {end_time - start_time:.2f} seconds")
    print("=" * 50)
    
    print(f"\nOverall Statistics:")
    print(f"Total configurations analyzed: {total_games}")
    print(f"Player 1 (first player) wins: {player1_wins} ({player1_wins/total_games*100:.1f}%)")
    print(f"Player 2 (second player) wins: {player2_wins} ({player2_wins/total_games*100:.1f}%)")
    
    print(f"\nFirst-Player Advantage: {(player1_wins/total_games - 0.5)*100:+.1f}%")
    
    print(f"\nNOTE: This analysis is based on {n_samples} randomly sampled board configurations.")


if __name__ == "__main__":
    # You can change the number of samples here
    analyze_win_rates_with_samples(10000)